{"version":3,"sources":["Reducer/inventorySlice.js","Reducer/apiSlice.js","Reducer/index.js","Api/index.js","Reducer/store.js","Inventory/index.js","Login/index.js","App/index.js","ServiceWorker/serviceWorkerRegistration.js","index.js"],"names":["inventorySlice","createSlice","name","initialState","reducers","loaded","state","action","payload","actions","loading","response","rootReducer","combineReducers","inventory","inventoryReducer","api","type","Object","assign","data","withApi","WrappedComponent","comp","props","username","password","jsessionid","localStorage","getItem","this","history","push","get","auth","login","inventoryList","React","Component","withRouter","store","createStore","Inventory","subscribe","console","log","getState","then","dispatch","catch","error","setState","status","request","message","map","item","displayname","amount","id","connect","handleInputChange","bind","handleLogin","event","target","value","preventDefault","res","className","htmlFor","onChange","aria-describedby","onClick","App","to","exact","path","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af8f1338.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = []\n\nconst inventorySlice = createSlice({\n    name: 'inventory',\n    initialState,\n    reducers: {\n        loaded(state, action) {\n            return action.payload\n        }\n    }\n})\n\nexport const { loaded } = inventorySlice.actions\n\nexport default inventorySlice.reducer","const initialState = {\n    loading: false,\n    response: {}\n}\n\nexport default function apiReducer(state = initialState, action) {\n    switch (action.type) {\n        case \"api/loading\":\n            return Object.assign({}, state, { loading: action.data })\n        case \"api/error\":\n            return Object.assign({}, state, { response: action.data })\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\n\nimport inventoryReducer from './inventorySlice'\nimport apiReducer from './apiSlice'\n\nconst rootReducer = combineReducers({\n    // Define a top-level state field named `todos`, handled by `todosReducer`\n    inventory: inventoryReducer,\n    api: apiReducer\n  })\n  \n  export default rootReducer;\n  ","import React from 'react';\nimport { withRouter } from \"react-router\";\nimport { get } from 'axios';\n\n\n// This function takes a component...\nconst withApi = WrappedComponent => {\n\n  // ...and returns another component...\n  const comp = class extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        username: \"\",\n        password: \"\",\n        jsessionid: localStorage.getItem(\"jsessionid\")\n      };\n    }\n\n    componentDidMount() {\n      if (this.state.jsessionid === \"\") {\n        this.props.history.push(\"/login\")\n      }\n    }\n\n    inventoryList() {\n      return get('http://localhost:8080/inventory', {\n        auth: {\n          username: 'jan',\n          password: 'password'\n        }\n      });\n    }\n\n    login(username, password) {\n      return get('http://localhost:8080/user/login', {\n        auth: {\n          username: username,\n          password: password\n        }\n      });\n    }\n\n    render() {\n      // ... and renders the wrapped component with the fresh data!\n      // Notice that we pass through any additional props\n      return <WrappedComponent login={this.login} inventoryList={this.inventoryList} {...this.props} />;\n    }\n  };\n\n  return withRouter(comp);\n}\n\nexport default withApi;\n","import { createStore } from 'redux'\nimport rootReducer from './'\n\nconst store = createStore(rootReducer)\n\nexport default store","import React from 'react';\nimport withApi from \"../Api\";\nimport { connect } from 'react-redux';\nimport store from '../Reducer/store';\n\nclass Inventory extends React.Component {\n\n    componentDidMount() {\n        // Every time the state changes, log it\n        // Note that subscribe() returns a function for unregistering the listener\n        store.subscribe(() =>\n            console.log('State after dispatch: ', store.getState())\n        )\n\n        this.props.inventoryList().then(data => {\n            console.log(data.data);\n            store.dispatch({ type: 'inventory/loaded', payload: data.data })\n        }).catch(error => {\n            this.setState({\n                error: {\n                    status: error.request.status,\n                    message: error.message\n                }\n            })\n            if (error.request.status === 401) {\n                this.props.history.push(\"/login\")\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div>Loading: {this.props.api.loading}</div>\n                <div>Error: {this.props.api.response.status} - {this.props.api.response.message}</div>\n                <div>\n                    Inventory\n                {this.props.inventory.map(item => (\n                    <li key={item.id}>\n                        {item.displayname} {item.amount}\n                    </li>\n                ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return state\n}\n\nexport default connect(mapStateToProps)(withApi(Inventory));\n","import React from 'react';\nimport withApi from '../Api';\n\nclass Login extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            password: \"\"\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n    }\n\n    handleInputChange(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    handleLogin(event) {\n        event.preventDefault();\n        this.props.login(this.state.username, this.state.password).then(res => {\n            console.log(res);\n            if(res.status === 200) {\n                this.props.history.push(\"/evening\")\n            }\n        }).catch(error => {\n            this.setState({\n                error: {\n                    status: error.request.status,\n                    message: error.message\n                },\n                password: ''\n            })\n        });\n    }\n\n    render() {\n        const { error } = this.state;\n        return (\n            <div>\n                <form>\n                    <div className=\"mb-3\">\n                        <label htmlFor=\"usernameInput\" className=\"form-label\">Username</label>\n                        <input type=\"text\" name=\"username\" className=\"form-control\" id=\"usernameInput\" value={this.state.username} onChange={this.handleInputChange} />\n                    </div>\n                    <div className=\"mb-3\">\n                        <label htmlFor=\"passwordInput\" className=\"form-label\">Password</label>\n                        <input type=\"password\" name=\"password\" className=\"form-control\" id=\"passwordInput\" aria-describedby=\"passwordHelp\" value={this.state.password} onChange={this.handleInputChange} />\n                        <div id=\"passwordHelp\" className=\"form-text\">Never share your password with anyone else.</div>\n                    </div>\n                    { error && \n                    <div>{error.status} - {error.message}</div>\n                    }\n                    <button onClick={this.handleLogin} className=\"btn btn-primary\">Login</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default withApi(Login);","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from '../Reducer';\n\nimport './App.css';\nimport Inventory from '../Inventory';\nimport Login from '../Login';\n\nimport { ReactComponent as Dice4 } from \"bootstrap-icons/icons/dice-4-fill.svg\";\nimport { ReactComponent as Dice2 } from \"bootstrap-icons/icons/dice-2-fill.svg\";\nimport { ReactComponent as Dice6 } from \"bootstrap-icons/icons/dice-6-fill.svg\";\nimport { ReactComponent as CardList } from \"bootstrap-icons/icons/card-list.svg\";\nimport { ReactComponent as LoginIcon } from \"bootstrap-icons/icons/box-arrow-in-right.svg\";\n\nfunction App() {\n  const store = createStore(rootReducer);\n  return (\n    <Provider store={store}>\n      <Router>\n        <header>\n          <nav className=\"navbar navbar-expand-md fixed-top\" id=\"navi\">\n            <div className=\"container-fluid\">\n              <Link className=\"navbar-brand\" to=\"/\">\n                <Dice4 /> <Dice2 /> <Dice6 /> <Dice6 /> <Dice6 /> WC Hüttenberg\n            </Link>\n              <Link to=\"/evening\">\n                <Dice6 /> Würfelabend\n            </Link>\n              <Link to=\"/inventory\">\n                <CardList /> Inventar\n            </Link>\n              <Link to=\"/login\">\n                <LoginIcon /> Login\n            </Link>\n            </div>\n          </nav>\n        </header>\n\n        <main className=\"flex-shrink-0\">\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\">\n                Home\n          </Route>\n              <Route path=\"/inventory\">\n                <Inventory />\n              </Route>\n              <Route path=\"/login\">\n                <Login />\n              </Route>\n            </Switch>\n          </div>\n        </main>\n\n        <footer className=\"footer mt-auto py-3\" id=\"footer\">\n          <div className=\"container\">\n            <div className=\"text-muted text-center\">\n              <b>© WC Hüttenberg 2021</b> - <a href=\"mailto:jan.stopfer@web.de\">jan.stopfer@web.de</a>\n            </div>\n          </div>\n        </footer>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './ServiceWorker/serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n"],"sourceRoot":""}